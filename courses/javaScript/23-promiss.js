//–°–æ–∑–¥–∞–Ω–∏–µ –ø—Ä–æ–º–∏—Å–∞

const myPromise = new Promise(function(resolve, reject){
    console.log('Promise created');
    setTimeout(function(){
        // –∑–∞–ø—Ä–æ—Å –Ω–∞ —Å–µ—Ä–≤–µ—Ä
        const response = true;
        if (response) {
            let message = "SUCCESS"
            resolve(message);
        } else {
            let message = "FAILED"
            reject(message);
        }
    }, 1500)
});

myPromise.then(function(data){
    setTimeout(() => {
        console.log('Then 1');
        console.log(data);
        return 'Data from then 1'   
    }, 1000)
    
}).then(function(data){
    console.log('Then 2');
    console.log(data);
}).catch(function(data){
    console.log('Catch');
    console.log(data);
})



//—Ü–µ–ø–æ—á–∫–∏ –ø—Ä–æ–º–∏—Å–æ–≤
const checkRooms = new Promise(function (resolve, reject) {
	setTimeout(function () {
		console.log('–ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–æ–º–µ—Ä–∞ –≤ –æ—Ç–µ–ª–µ...');
		// ---- –∫–æ–¥ –∫–æ—Ç–æ—Ä—ã–π –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –∑–∞–ø—Ä–æ—Å –≤ –æ—Ç–µ–ª—å ---
		let availableRooms = true;

		if (availableRooms) {
			resolve('–ù–æ–º–µ—Ä–∞ –µ—Å—Ç—å!');
		} else {
			reject('–ù–æ–º–µ—Ä–æ–≤ –Ω–µ—Ç.');
		}
	}, 1500);
})
	.then(function (data) {
		return new Promise(function (resolve, reject) {
			setTimeout(() => {
				console.log('---- then 1. checkTickets ----');
				console.log('–û—Ç–≤–µ—Ç –Ω–∞ –ø—Ä–µ–¥—ã–¥—É—â–µ–º —à–∞–≥–µ:', data);

				console.log('–ü—Ä–æ–≤–µ—Ä—è–µ–º –∞–≤–∏–∞–±–∏–ª–µ—Ç—ã...');
				// ---- –∫–æ–¥ –∫–æ—Ç–æ—Ä—ã–π –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –∑–∞–ø—Ä–æ—Å –≤ –∞–≤–∏–∞–∫–æ–º–ø–∞–Ω–∏—é ---
				const availableTickets = true;

				if (availableTickets) {
					let message = '–ë–∏–ª–µ—Ç—ã –µ—Å—Ç—å';
					resolve('message');
				} else {
					let message = '–ë–∏–ª–µ—Ç–æ–≤ –Ω–µ—Ç';
					throw new Error(message);
				}
			}, 1000);
		});
	})
	.then(function (data) {
		console.log('---- then 2. sumbitVacation ----');
		console.log('–û—Ç–≤–µ—Ç –Ω–∞ –ø—Ä–µ–¥—ã–¥—É—â–µ–º —à–∞–≥–µ:', data);
		console.log('–ï–¥–µ–º –≤ –æ—Ç–ø—É—Å–∫! üå¥ :)');
	})
	.catch(function (data) {
		console.log('---- catch ----');
		console.log('–û—Ç–≤–µ—Ç –Ω–∞ –ø—Ä–µ–¥—ã–¥—É—â–µ–º —à–∞–≥–µ:', data);
		console.log('–û—Ç–ø—É—Å–∫ –æ—Ç–º–µ–Ω—è–µ—Ç—Å—è üò¢ :(');
	});
